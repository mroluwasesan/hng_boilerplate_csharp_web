name: Generate Release JSON

on:
  release:
    types: [published]

jobs:
  create-release-json:
    runs-on: self-hosted
    env:
      release_file_dir: release
      release_file_path: release/release-${{ github.event.release.tag_name }}.json
      release_notes_url: /releases/${{ github.event.release.tag_name }}.json
      release_name: ${{ github.event.release.name }}
      release_body: ${{ github.event.release.body }}

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: staging
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Print current working directory
        run: pwd

      - name: List files in the current directory
        run: ls -la

      - name: Create release JSON file
        run: |
          echo "Creating directory $release_file_dir if it does not exist"
          mkdir -p "$release_file_dir"
          echo "Directory contents after creation:"
          ls -la "$release_file_dir"
          echo "{" > "$release_file_path"
          echo "  \"title\": \"$release_name\"," >> "$release_file_path"
          echo "  \"body\": \"$release_body\"" >> "$release_file_path"
          echo "}" >> "$release_file_path"
          echo "Release JSON file created at $release_file_path"

      - name: Configure Git to use GitHub token
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git remote set-url origin https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Update version.json file
        run: |
          echo "{\"number\": \"${{ github.event.release.tag_name }}\", \"release_notes_url\": \"${{ env.release_notes_url }}\"}" > release/version.json
          echo "Updated version.json file at release/version.json"

      - name: Commit and push the release JSON to the release directory
        run: |
          git add "$release_file_path"
          git add release/version.json
          git commit -m "Add release-${{ github.event.release.tag_name }}.json"
          git push origin staging

      - name: Cleanup old releases, keep only the last 10
        run: |
          old_files=$(ls -t release/release-*.json | tail -n +11)
          if [ -n "$old_files" ]; then
              echo "Removing old release files"
              echo "$old_files" | xargs -r git rm
              git commit -m "Remove old release files"
              git pull --rebase origin staging
              git push origin staging
          fi
